plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.microservices'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

ext {
	mapstructVersion = '1.6.3'
	lombokVersion = '1.18.34'
	lombokMapstructBindingVersion = '0.2.0'
	testContainersVersion = '1.20.2'
	UUIDCreatorVersion = '5.1.0'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation "com.fasterxml.uuid:java-uuid-generator:${UUIDCreatorVersion}"



	// MapStruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation "org.testcontainers:mongodb:${testContainersVersion}"
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
	toolVersion = '0.8.12'
}

tasks.named('test') {
	useJUnitPlatform {
		includeEngines 'junit-jupiter'
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test // Đảm bảo chạy test trước khi tạo báo cáo
	reports {
		xml.required = true // Báo cáo dạng XML
		html.required = true // Báo cáo dạng HTML
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/microservices/dto/**',
					'com/microservices/entity/**',
					'com/microservices/mapper/**',
					'com/microservices/configuration/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

// Cấu hình Spotless
spotless {
	java {
		removeUnusedImports() // Xóa import không dùng
		trimTrailingWhitespace() // Xóa khoảng trắng cuối dòng
		endWithNewline() // Đảm bảo tệp kết thúc bằng dòng mới
		indentWithTabs(4) // Sử dụng tab, mỗi tab bằng 4 khoảng trắng
		palantirJavaFormat() // Định dạng theo chuẩn Palantir
		importOrder('java', 'jakarta', 'org', 'com', 'com.diffplug', '') // Thứ tự import
	}
}

tasks.named('build') {
	dependsOn spotlessApply // Áp dụng Spotless khi build
}